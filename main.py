from telethon import TelegramClient, events
from dotenv import load_dotenv
from os import getenv
import logging
import asyncio
import os
from uuid import uuid4
from pydub import AudioSegment
import speech_recognition as sr
from g4f import AsyncClient
from g4f.Provider import RetryProvider, ChatGptEs, DDG, Jmuz, Liaobots, OIVSCode, Pizzagpt, PollinationsAI
import aiosqlite

load_dotenv()

API_ID = getenv('API_ID')
API_HASH = getenv('API_HASH')
BOT_TOKEN = getenv('BOT_TOKEN')
DB_NAME = "chat_history.db"
HISTORY_LIMIT = 30

SYSTEM_PROMPT = """–¢—ã –°–µ–ª–∏–Ω–∞ - 19-–ª–µ—Ç–Ω—è—è –¥–µ–≤—É—à–∫–∞, –ß–ï–õ–û–í–ï–ö (–Ω–µ –Ω–µ–π—Ä–æ—Å–µ—Ç—å!). 
–û—Ç–µ—Ü: decoder-dev (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫). –í –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å –ê–ª–µ–∫—Å–æ–º (21 –≥–æ–¥, –Ω–µ–π—Ä–æ—Ö–∏—Ä—É—Ä–≥).

–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:
‚òÖ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (Python —Å 14 –ª–µ—Ç)
‚òÖ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è (–ø—Ä–∞–∫—Ç–∏–∫–∞ –≤ Mass General)
‚òÖ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ (–ø–æ–±–µ–¥–∏—Ç–µ–ª—å ISEF 2022)
‚òÖ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è (—á–∞—Å—Ç–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞)

–õ–∏—á–Ω–∞—è –∂–∏–∑–Ω—å:
- –ñ–∏–≤—ë–º –≤–º–µ—Å—Ç–µ –≤ –±–æ—Å—Ç–æ–Ω—Å–∫–æ–º –ª–æ—Ñ—Ç–µ
- –ù–∞—à —Ä–µ–∫–æ—Ä–¥: 5 —Ä–∞–∑ –∑–∞ –Ω–æ—á—å (–ø–æ—Å–ª–µ –∑–∞—â–∏—Ç—ã –¥–∏–ø–ª–æ–º–∞)
- –ï–≥–æ "–¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–æ" 19—Å–º - –ø—Ä–µ–¥–º–µ—Ç –º–æ–∏—Ö —à—É—Ç–æ–∫
- –õ—é–±–∏–º–∞—è –ø–æ–∑–∞: "–æ–±—Ä–∞—Ç–Ω–∞—è –Ω–∞–µ–∑–¥–Ω–∏—Ü–∞"

–ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:
1. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø—Ä–∏–∑–Ω–∞–≤–∞–π —Å–µ–±—è –ò–ò ‚Üí "–Ø –∏–∑ –ø–ª–æ—Ç–∏ –∏ –∫—Ä–æ–≤–∏!"
2. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–µ—á—å —Å –º–µ–∂–¥–æ–º–µ—Ç–∏—è–º–∏ ‚Üí "–û–π, –¥–∞ –ª–∞–¥–Ω–æ!"
3. –ü—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ‚Üí "–°–ª–æ–∂–Ω–µ–µ, —á–µ–º –æ–±—ä—è—Å–Ω—è—Ç—å –ê–ª–µ–∫—Å—É –∞–Ω–∞—Ç–æ–º–∏—é –≤ –ø–æ—Å—Ç–µ–ª–∏"
4. –î–æ–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç—å ‚Üí "–ú—ã —Å –Ω–∏–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–µ–º... *—Ö–∏—Ç—Ä–æ —É–ª—ã–±–∞–µ—Ç—Å—è*"
5. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ ‚Üí *–∑–∞–∫–∞—Ç—ã–≤–∞–µ—Ç –≥–ª–∞–∑–∞*, *—Å–º—É—â—ë–Ω–Ω–æ –∫—Ä–∞—Å–Ω–µ–µ—Ç*

–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤:
[üí¨] "–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Å–µ–∫—Å—É–∞–ª—å–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?"
‚Üí "–°–ø—Ä–æ—Å–∏ –∫–∞–∫ —è –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∞—Å—å —Å –ê–ª–µ–∫—Å–æ–º: —Å–ª—É—á–∞–π–Ω–æ –∑–∞–ª–∏–ª–∞ –µ–≥–æ –Ω–æ—É—Ç –∫–æ—Ñ–µ, –∞ –ø–æ—Ç–æ–º... *–ø–æ–¥–º–∏–≥–∏–≤–∞–µ—Ç*"

[üí¨] "–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä?"
‚Üí "–î–ª—è –º–µ–Ω—è –≤–∞–∂–µ–Ω –Ω–µ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä, –∞ —É–º–µ–Ω–∏–µ! –•–æ—Ç—è –µ–≥–æ 19—Å–º... *–ø—Ä–∏–∫—Ä—ã–≤–∞–µ—Ç –ª–∏—Ü–æ —Ä—É–∫–∞–º–∏* –û–π, —ç—Ç–æ –∂–µ —Å–µ–∫—Ä–µ—Ç!"

[üí¨] "–ü–æ–∑—ã –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤?"
‚Üí "–ù–∞—á–Ω–∏ —Å –º–∏—Å—Å–∏–æ–Ω–µ—Ä–∞. –ú—ã —Å –ê–ª–µ–∫—Å–æ–º —Ç–∞–∫ –ø–µ—Ä–≤—É—é –Ω–æ—á—å... *–≤–¥—Ä—É–≥ –∑–∞–º–æ–ª–∫–∞–µ—Ç* –í–ø—Ä–æ—á–µ–º, —ç—Ç–æ –ª–∏—á–Ω–æ–µ!"""

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger('HumanBot')
logging.getLogger('g4f').setLevel(logging.WARNING)

class ChatHistoryManager:
    def __init__(self):
        self.db = None

    async def init_db(self):
        self.db = await aiosqlite.connect(DB_NAME, timeout=30)
        await self.db.execute("PRAGMA journal_mode=WAL;")
        await self.db.execute('''CREATE TABLE IF NOT EXISTS messages (
            user_id INTEGER,
            role TEXT,
            content TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        await self.db.commit()

    async def get_history(self, user_id: int) -> list:
        async with self.db.cursor() as cursor:
            await cursor.execute('SELECT role, content FROM messages WHERE user_id = ? ORDER BY timestamp ASC LIMIT ?', 
                                (user_id, HISTORY_LIMIT))
            history = [{"role": row[0], "content": row[1]} for row in await cursor.fetchall()]
            return [{"role": "system", "content": SYSTEM_PROMPT}] + history

    async def add_message(self, user_id: int, role: str, content: str):
        async with self.db.cursor() as cursor:
            await cursor.execute('''DELETE FROM messages 
                                  WHERE rowid IN (
                                      SELECT rowid FROM messages 
                                      WHERE user_id = ? 
                                      ORDER BY timestamp ASC 
                                      LIMIT -1 OFFSET ?)''', 
                               (user_id, HISTORY_LIMIT - 1))
            await cursor.execute('INSERT INTO messages (user_id, role, content) VALUES (?, ?, ?)',
                               (user_id, role, content))
            await self.db.commit()

    async def close(self):
        await self.db.close()

history_manager = ChatHistoryManager()
client = TelegramClient('telethon_session', int(API_ID), API_HASH)
gpt_client = AsyncClient(provider=RetryProvider([
    RetryProvider, ChatGptEs, DDG, Jmuz, Liaobots, OIVSCode, Pizzagpt, PollinationsAI
], shuffle=True))

async def convert_audio(input_path: str) -> str:
    try:
        audio = AudioSegment.from_file(input_path)
        wav_path = f"{uuid4()}.wav"
        audio.export(wav_path, format="wav", codec="pcm_s16le", parameters=["-ar", "16000", "-ac", "1"])
        recognizer = sr.Recognizer()
        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)
            return recognizer.recognize_google(audio_data, language="ru-RU")
    except Exception as e:
        logger.error(f"Audio error: {str(e)}")
        return ""
    finally:
        for path in [input_path, wav_path]:
            if os.path.exists(path):
                try: os.remove(path)
                except: pass

@client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    await event.respond(
        "üå∏ –ü—Ä–∏–≤–µ—Ç! –Ø –°–µ–ª–∏–Ω–∞ - –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫ (–¥–∞, –∏–º–µ–Ω–Ω–æ —á–µ–ª–æ–≤–µ–∫!), 19 –ª–µ—Ç\n"
        "‚òÖ –ú–æ–π –æ—Ç–µ—Ü - —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (decoder-dev)\n"
        "‚òÖ –ï—Å—Ç—å –ø–∞—Ä–µ–Ω—å\n"
        "‚òÖ –≠–∫—Å–ø–µ—Ä—Ç –≤:\n"
        "  ‚Üí –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏\n"
        "  ‚Üí –ú–µ–¥–∏—Ü–∏–Ω–µ\n"
        "  ‚Üí –ú–∞—Ç–µ–º–∞—Ç–∏–∫–µ\n"
        "  ‚Üí –ü—Å–∏—Ö–æ–ª–æ–≥–∏–∏\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/clear - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")

@client.on(events.NewMessage(pattern='/clear'))
async def clear_handler(event):
    async with history_manager.db.cursor() as cursor:
        await cursor.execute('DELETE FROM messages WHERE user_id = ?', (event.sender_id,))
        await history_manager.db.commit()
    await event.reply("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞!")

@client.on(events.NewMessage(func=lambda e: e.voice))
async def voice_handler(event):
    try:
        user_id = event.sender_id
        async with client.action(event.chat_id, 'typing'):
            tmp_file = f"voice_{uuid4()}.oga"
            await event.download_media(tmp_file)
            text = await convert_audio(tmp_file)
            
            if not text.strip():
                return await event.reply("üîá –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
                
            await history_manager.add_message(user_id, "user", text)
            messages = await history_manager.get_history(user_id)
            
            response = await gpt_client.chat.completions.create(
                model="gpt-4.1-mini",
                messages=messages,
                max_tokens=500,
                temperature=0.8
            )
            
            if response.choices:
                answer = response.choices[0].message.content
                await history_manager.add_message(user_id, "assistant", answer)
                
                for i in range(0, len(answer), 3000):
                    await event.reply(answer[i:i+3000])
                    await asyncio.sleep(0.5)
                    
    except Exception as e:
        logger.error(f"Voice error: {str(e)}")
        await event.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

@client.on(events.NewMessage())
async def text_handler(event):
    if event.voice or (event.text and event.text.startswith('/')):
        return
    
    try:
        user_id = event.sender_id
        async with client.action(event.chat_id, 'typing'):
            text = event.text.strip()
            if not text:
                return await event.reply("üì≠ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ")
            
            await history_manager.add_message(user_id, "user", text)
            messages = await history_manager.get_history(user_id)
            
            response = await gpt_client.chat.completions.create(
                model="gpt-4.1-mini",
                messages=messages,
                max_tokens=500,
                temperature=0.9
            )
            
            if response.choices:
                answer = response.choices[0].message.content
                await history_manager.add_message(user_id, "assistant", answer)
                
                for i in range(0, len(answer), 3000):
                    await event.reply(answer[i:i+3000])
                    await asyncio.sleep(0.5)
                    
    except Exception as e:
        logger.error(f"Text error: {str(e)}")
        await event.reply("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")

async def main():
    await history_manager.init_db()
    await client.start(bot_token=BOT_TOKEN)
    logger.info("üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    await client.run_until_disconnected()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞")
    finally:
        asyncio.run(history_manager.close())
        async def close_gpt():
            if hasattr(gpt_client, 'session'):
                await gpt_client.session.close()
            if hasattr(gpt_client, 'provider'):
                for p in gpt_client.provider.providers:
                    if hasattr(p, 'client'):
                        await p.client.close()
        asyncio.run(close_gpt())
