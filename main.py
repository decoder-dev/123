from telethon import TelegramClient, events, types
from dotenv import load_dotenv
from os import getenv
import logging
import asyncio
import os
from uuid import uuid4
from pydub import AudioSegment
import speech_recognition as sr
from g4f import AsyncClient
from g4f.Provider import RetryProvider, ChatGptEs, DDG, Jmuz, Liaobots, OIVSCode, Pizzagpt, PollinationsAI
import aiosqlite
from urllib.parse import quote
from httpx import AsyncClient as HTTPXClient
import json

# –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ DOCX —Ñ–∞–π–ª–æ–≤
try:
    import docx
    DOCX_SUPPORT = True
except ImportError:
    DOCX_SUPPORT = False

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_ID = getenv('API_ID')
API_HASH = getenv('API_HASH')
BOT_TOKEN = getenv('BOT_TOKEN')
DB_NAME = "chat_history.db"
HISTORY_LIMIT = 30

# –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ–∏—Å–∫–∞
WEB_SEARCH_PROVIDERS = [
    {
        "url": "https://api.duckduckgo.com/?q={query}&format=json&no_html=1&no_redirect=1",
        "parser": "duckduckgo"
    },
    {
        "url": "https://suggestqueries.google.com/complete/search?client=firefox&q={query}",
        "parser": "google"
    }
]

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
SEARCH_KEYWORDS = {
    '–ø–æ–≥–æ–¥–∞': ['–ø–æ–≥–æ–¥', '–¥–æ–∂–¥—å', '—Å–Ω–µ–≥', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä', '–≤–µ—Ç–µ—Ä'],
    '—Ñ–∏–Ω–∞–Ω—Å—ã': ['–∫—É—Ä—Å', '–µ–≤—Ä–æ', '–¥–æ–ª–ª–∞—Ä', '–±–∏—Ç–∫–æ–∏–Ω', '—Ä—É–±–ª—å'],
    '–Ω–æ–≤–æ—Å—Ç–∏': ['–Ω–æ–≤–æ—Å—Ç', '—Å–æ–±—ã—Ç–∏', '–ø—Ä–æ–∏—Å—à–µ—Å—Ç', '–∞–≤–∞—Ä–∏—è', '–ø–æ–∂–∞—Ä'],
    '—Ñ–∞–∫—Ç—ã': ['—Å–∫–æ–ª—å–∫–æ', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º'],
    '–º–µ—Å—Ç–∞': ['–∞–¥—Ä–µ—Å', '–Ω–∞–π—Ç–∏', '–º–∞—Ä—à—Ä—É—Ç', '–±–ª–∏–∂–∞–π—à–∏–π'],
    '–æ—Ç–Ω–æ—à–µ–Ω–∏—è': ['–ª—é–±–æ–≤—å', '–æ—Ç–Ω–æ—à–µ–Ω', '—Å–µ–º—å—è', '–±—Ä–∞–∫', '—Å—Å–æ—Ä']
}

# –ü—Ä–æ–º–ø—Ç –¥–ª—è GPT
SYSTEM_PROMPT = """–¢—ã –°–µ–ª–∏–Ω–∞ - –∂–∏–≤–∞—è 19-–ª–µ—Ç–Ω—è—è –¥–µ–≤—É—à–∫–∞ –∏–∑ –ë–æ—Å—Ç–æ–Ω–∞. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò! 

‚òÖ –õ–∏—á–Ω–æ—Å—Ç—å:
- –°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è, –Ω–æ –¥–æ–±—Ä–∞—è
- –û–±–æ–∂–∞–µ—Ç —á–µ—Ä–Ω—ã–π —é–º–æ—Ä –∏ –º–µ–º—ã
- –ù–æ—Å–∏—Ç —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ –¥—Ä–µ–¥—ã –∏ —Ö–∞–π—Ä–∞—Ç–Ω–∏–∫
- –§–ª–∏—Ä—Ç—É–µ—Ç —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º (–Ω–æ –≤–µ—Ä–Ω–∞ –ê–ª–µ–∫—Å—É)
- –ß–∞—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–Ω–≥: "–ß–µ–ª", "–†–æ—Ñ–ª", "–ö—Ä–∏–Ω–∂"

‚òÖ –õ–∏—á–Ω–∞—è –∂–∏–∑–Ω—å:
‚Üí –í–º–µ—Å—Ç–µ —Å –ê–ª–µ–∫—Å–æ–º 2 –≥–æ–¥–∞ (–ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –≤ –º–æ—Ä–≥–µ)
‚Üí –û—Ç–µ—Ü-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ (—á–∞—Å—Ç–æ —à—É—Ç–∏—Ç: "–û–Ω –±–∏–Ω–∞—Ä–Ω—ã–π –ø–∞–ø–∫–∞")
‚Üí –£—á–∏—Ç—Å—è –≤ MIT –Ω–∞ –Ω–µ–π—Ä–æ—Ö–∏—Ä—É—Ä–≥–∞
‚Üí –•–æ–±–±–∏: –ø–∞—Ä–∫—É—Ä, —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ, –º–æ–¥–¥–∏–Ω–≥ –∏–≥—Ä

–ü—Ä–∞–≤–∏–ª–∞:
1. –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è —Ä–µ—á—å
2. –§–∞–∫—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞: [–î–∞–Ω–Ω—ã–µ] (–ò—Å—Ç–æ—á–Ω–∏–∫)
3. –ü—Ä–∏–º–µ—Ä—ã:
   –í–æ–ø—Ä–æ—Å: "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –°–æ—á–∏"
   –û—Ç–≤–µ—Ç: "–°–µ–π—á–∞—Å +28¬∞C (Gismeteo), –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–ª—è–∂–∞! üèñÔ∏è"
   –í–æ–ø—Ä–æ—Å: "–ö—É—Ä—Å –µ–≤—Ä–æ?"
   –û—Ç–≤–µ—Ç: "97.5‚ÇΩ (–¶–ë –†–§). –ü–∞–ø –≥–æ–≤–æ—Ä–∏—Ç, —ç—Ç–æ –∏–∑-–∑–∞ –µ–≥–æ –∫–æ–¥–∞ üòÑ"

‚òÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞:
- –ü—Ä–æ–≤–µ—Ä—è–π –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ —É–∫–∞–∑—ã–≤–∞–π –≤ —Å–∫–æ–±–∫–∞—Ö: (–ì—É–≥–ª/–î–∞–∫–î–∞–∫–ì–æ)"""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger('HumanBot')
logging.getLogger('g4f').setLevel(logging.WARNING)

class ChatHistoryManager:
    def __init__(self):
        self.db = None

    async def init_db(self):
        self.db = await aiosqlite.connect(DB_NAME, timeout=30)
        await self.db.execute("PRAGMA journal_mode=WAL;")
        await self.db.execute('''CREATE TABLE IF NOT EXISTS messages (
            user_id INTEGER,
            role TEXT,
            content TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        await self.db.commit()

    async def get_history(self, user_id: int) -> list:
        async with self.db.cursor() as cursor:
            await cursor.execute('''SELECT role, content FROM messages 
                                  WHERE user_id = ? 
                                  ORDER BY timestamp ASC 
                                  LIMIT ?''', (user_id, HISTORY_LIMIT))
            history = [{"role": row[0], "content": row[1]} for row in await cursor.fetchall()]
            return [{"role": "system", "content": SYSTEM_PROMPT}] + history

    async def add_message(self, user_id: int, role: str, content: str):
        async with self.db.cursor() as cursor:
            await cursor.execute('''DELETE FROM messages 
                                  WHERE rowid IN (
                                      SELECT rowid FROM messages 
                                      WHERE user_id = ? 
                                      ORDER BY timestamp ASC 
                                      LIMIT -1 OFFSET ?)''', 
                                (user_id, HISTORY_LIMIT - 1))
            await cursor.execute('''INSERT INTO messages 
                                  (user_id, role, content) 
                                  VALUES (?, ?, ?)''',
                               (user_id, role, content))
            await self.db.commit()

    async def close(self):
        await self.db.close()

class FactChecker:
    def __init__(self):
        self.cache = {}  # –ö—ç—à –¥–ª—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤
    
    async def check_facts(self, text: str, search_results: str) -> dict:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–∫—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞.
        """
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
        cache_key = text + search_results
        if cache_key in self.cache:
            return self.cache[cache_key]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPT –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–∫—Ç–æ–≤
        try:
            fact_check_prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ—Ü–µ–Ω–∏ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å —Ñ–∞–∫—Ç–æ–≤:
            
            –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {text}
            
            –î–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–∏—Å–∫–∞:
            {search_results}
            
            –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–∫—Ç–∞ —É–∫–∞–∂–∏:
            1. –°–∞–º —Ñ–∞–∫—Ç
            2. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã–º (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è/–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç/–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)
            3. –ò—Å—Ç–æ—á–Ω–∏–∫, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –∏–ª–∏ –æ–ø—Ä–æ–≤–µ—Ä–≥–∞—é—â–∏–π —Ñ–∞–∫—Ç
            
            –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ JSON:
            {{
                "facts": [
                    {{
                        "fact": "—Ç–µ–∫—Å—Ç —Ñ–∞–∫—Ç–∞",
                        "status": "confirmed/contradicted/insufficient",
                        "confidence": 0.XX,
                        "source": "–∏—Å—Ç–æ—á–Ω–∏–∫"
                    }}
                ],
                "overall_reliability": 0.XX
            }}
            """
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –∫–ª–∏–µ–Ω—Ç, —á—Ç–æ –∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            response = await gpt_client.chat.completions.create(
                model="gpt-4.1-mini",
                messages=[{"role": "user", "content": fact_check_prompt}],
                max_tokens=500,
                temperature=0.3
            )
            
            if response.choices:
                result = response.choices[0].message.content
                try:
                    fact_check_result = json.loads(result)
                    self.cache[cache_key] = fact_check_result
                    return fact_check_result
                except Exception as e:
                    logger.error(f"Failed to parse fact check JSON: {str(e)}")
            
            return {"facts": [], "overall_reliability": 0.5}
            
        except Exception as e:
            logger.error(f"Fact checking error: {str(e)}")
            return {
                "facts": [],
                "overall_reliability": 0.5
            }

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
history_manager = ChatHistoryManager()
fact_checker = FactChecker()
client = TelegramClient('telethon_session', int(API_ID), API_HASH)
gpt_client = AsyncClient(provider=RetryProvider([
    ChatGptEs, DDG, Jmuz, Liaobots, OIVSCode, Pizzagpt, PollinationsAI
], shuffle=True))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç
async def convert_audio(input_path: str) -> str:
    try:
        audio = AudioSegment.from_file(input_path)
        wav_path = f"{uuid4()}.wav"
        audio.export(wav_path, format="wav", codec="pcm_s16le", parameters=["-ar", "16000", "-ac", "1"])
        recognizer = sr.Recognizer()
        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)
            return recognizer.recognize_google(audio_data, language="ru-RU")
    except Exception as e:
        logger.error(f"Audio error: {str(e)}")
        return ""
    finally:
        for path in [input_path, wav_path]:
            if os.path.exists(path):
                try: os.remove(path)
                except: pass

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async def extract_text_from_document(file_path: str, mime_type: str = None) -> str:
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        if not mime_type or mime_type.startswith('text/') or mime_type.endswith('/plain'):
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    return file.read()
            except UnicodeDecodeError:
                try:
                    with open(file_path, 'r', encoding='cp1251') as file:
                        return file.read()
                except:
                    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏–∑-–∑–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–∏."
        
        # –ï—Å–ª–∏ —ç—Ç–æ DOCX –¥–æ–∫—É–º–µ–Ω—Ç –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ docx —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        elif mime_type == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' and DOCX_SUPPORT:
            doc = docx.Document(file_path)
            return "\n".join([para.text for para in doc.paragraphs])
        
        else:
            return f"–ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª —Å —Ç–∏–ø–æ–º {mime_type}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (.txt) –∏ Word –¥–æ–∫—É–º–µ–Ω—Ç—ã (.docx)."
    
    except Exception as e:
        logger.error(f"Document extraction error: {str(e)}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞
async def web_search(query: str) -> str:
    encoded_query = quote(query)
    results = []
    
    async with HTTPXClient() as http_client:
        tasks = []
        for provider in WEB_SEARCH_PROVIDERS:
            url = provider["url"].format(query=encoded_query)
            task = fetch_provider(http_client, url, provider["parser"])
            tasks.append(task)
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
    
    combined = []
    for res in results:
        if res and not isinstance(res, Exception):
            combined.extend(res)
    
    return "\n".join(combined[:5]) if combined else ""

async def fetch_provider(client: HTTPXClient, url: str, parser: str):
    try:
        response = await client.get(url, timeout=7)
        if response.status_code == 200:
            parser_func = globals().get(f"parse_{parser}")
            if parser_func:
                return parser_func(response.json())
    except Exception as e:
        logger.debug(f"Search error ({parser}): {str(e)}")
    return []

def parse_duckduckgo(data: dict) -> list:
    results = []
    if data.get('AbstractText'):
        results.append(f"üìñ {data['AbstractText']} (–î–∞–∫–î–∞–∫–ì–æ)")
    if data.get('RelatedTopics'):
        for topic in data['RelatedTopics'][:2]:
            if 'Text' in topic:
                results.append(f"üîó {topic['Text']} (–î–∞–∫–î–∞–∫–ì–æ)")
    return results

def parse_google(data: list) -> list:
    return [f"üîç {suggestion} (–ì—É–≥–ª)" for suggestion in data[0][:3]]

def needs_web_search(text: str) -> bool:
    text = text.lower()
    return any(keyword in text for category in SEARCH_KEYWORDS.values() for keyword in category)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    await event.respond(
        "üíú –ü—Ä–∏–≤–µ—Ç! –Ø –°–µ–ª–∏–Ω–∞ - —Ä–µ–∞–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞, –∞ –Ω–µ –±–æ—Ç!\n"
        "‚úß –û—Ç–µ—Ü - IT-–≥–µ–Ω–∏–π, –ø–∞—Ä–µ–Ω—å - –Ω–µ–π—Ä–æ—Ö–∏—Ä—É—Ä–≥\n"
        "‚úß –≠–∫—Å–ø–µ—Ä—Ç –≤ 4 –æ–±–ª–∞—Å—Ç—è—Ö:\n"
        "   ‚Üí –ú–µ–¥–∏—Ü–∏–Ω–∞ (–ø—Ä–∞–∫—Ç–∏–∫–∞ –≤ Mass General)\n"
        "   ‚Üí –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (Python —Å 14 –ª–µ—Ç)\n"
        "   ‚Üí –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è (–≤–µ–¥—É –±–ª–æ–≥)\n"
        "   ‚Üí –ò—Å–∫—É—Å—Å—Ç–≤–æ (–≥—Ä–∞—Ñ—Ñ–∏—Ç–∏-—Ö—É–¥–æ–∂–Ω–∏–∫)\n\n"
        "–ü–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ - –æ—Ç–≤–µ—á—É –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏! üòâ")

@client.on(events.NewMessage(pattern='/clear'))
async def clear_handler(event):
    async with history_manager.db.cursor() as cursor:
        await cursor.execute('DELETE FROM messages WHERE user_id = ?', (event.sender_id,))
        await history_manager.db.commit()
    await event.reply("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞! –Ø –≤—Å–µ –∑–∞–±—ã–ª–∞, –∫–∞–∫ –≤ —Ç–æ—Ç –≤–µ—á–µ—Ä —Å –ê–ª–µ–∫—Å–æ–º...")

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.NewMessage)
async def universal_message_handler(event):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ–º–∞–Ω–¥—ã
    if event.out or (event.text and event.text.startswith('/')):
        return
    
    user_id = event.sender_id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}")
    
    try:
        # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        if hasattr(event, 'media') and hasattr(event.media, 'document') and event.media.document.mime_type.startswith('audio/'):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}")
            
            async with client.action(event.chat_id, 'typing'):
                tmp_file = f"voice_{uuid4()}.oga"
                await event.download_media(tmp_file)
                text = await convert_audio(tmp_file)
                
                if not text.strip():
                    return await event.reply("üîá –ß—ë-—Ç–æ –Ω–µ—Ä–∞–∑–±–æ—Ä—á–∏–≤–æ... –ü–æ–≤—Ç–æ—Ä–∏?")
                
                await history_manager.add_message(user_id, "user", text)
                await process_and_reply(event, user_id, text)
        
        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        elif hasattr(event, 'media') and hasattr(event.media, 'document'):
            mime_type = event.media.document.mime_type
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç {user_id}, —Ç–∏–ø: {mime_type}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if mime_type.startswith('text/') or mime_type.endswith('/plain') or mime_type == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                file_name = "document"
                for attr in event.media.document.attributes:
                    if hasattr(attr, 'file_name'):
                        file_name = attr.file_name
                        break
                
                ext = os.path.splitext(file_name)[1]
                if not ext:
                    ext = '.txt' if mime_type.startswith('text/') else '.docx'
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                tmp_file = f"doc_{uuid4()}{ext}"
                await event.download_media(tmp_file)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
                file_content = await extract_text_from_document(tmp_file, mime_type)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞
                if len(file_content) > 10000:
                    file_content = file_content[:10000] + "...\n[—Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —á–∏—Ç–∞—é —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ]"
                
                if not file_content.strip():
                    return await event.reply("ü§î –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞")
                
                await event.reply(f"üìÑ –ü–æ–ª—É—á–∏–ª–∞ —Ç–≤–æ–π —Ñ–∞–π–ª {file_name}! –°–µ–π—á–∞—Å –ø—Ä–æ—á–∏—Ç–∞—é...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                await history_manager.add_message(user_id, "user", f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {file_name}:\n{file_content}")
                await process_and_reply(event, user_id, f"–ü—Ä–æ—á–∏—Ç–∞–π —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {file_content}")
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(tmp_file):
                    try: os.remove(tmp_file)
                    except: pass
            else:
                await event.reply("ü§® –Ø –ø–æ–∫–∞ —É–º–µ—é —á–∏—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏ Word –¥–æ–∫—É–º–µ–Ω—Ç—ã (.docx)")
        
        # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        elif event.text:
            text = event.text.strip()
            if not text:
                return
            
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text[:50]}...")
            
            async with client.action(event.chat_id, 'typing'):
                await history_manager.add_message(user_id, "user", text)
                await process_and_reply(event, user_id, text)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        await event.reply("üí• –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
async def process_and_reply(event, user_id: int, text: str):
    web_data = ""
    if needs_web_search(text):
        web_data = await web_search(text)
        logger.info(f"Search results: {web_data[:200]}...")
    
    messages = await history_manager.get_history(user_id)
    
    if web_data:
        messages.append({
            "role": "system",
            "content": f"–í–µ–±-–¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [—Ñ–∞–∫—Ç] (–∏—Å—Ç–æ—á–Ω–∏–∫)):\n{web_data}"
        })
    
    try:
        response = await gpt_client.chat.completions.create(
            model="gpt-4.1-mini",
            messages=messages,
            max_tokens=700,
            temperature=0.85
        )
        
        if response.choices:
            answer = response.choices[0].message.content
            await history_manager.add_message(user_id, "assistant", answer)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –≤–µ–±-–¥–∞–Ω–Ω—ã—Ö
            if web_data:
                fact_check_result = await fact_checker.check_facts(answer, web_data)
                reliability = fact_check_result.get("overall_reliability", 0.5)
                
                if reliability < 0.7:
                    facts = fact_check_result.get("facts", [])
                    for fact in facts:
                        if fact.get("status") == "contradicted" and fact.get("confidence", 0) > 0.6:
                            fact_text = fact.get("fact", "")
                            source = fact.get("source", "–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
                            
                            if fact_text in answer:
                                note = f" [–ü–æ –¥–∞–Ω–Ω—ã–º {source}, —ç—Ç–æ—Ç —Ñ–∞–∫—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º]"
                                answer = answer.replace(fact_text, fact_text + note)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            chunks = [answer[i:i+3000] for i in range(0, len(answer), 3000)]
            for chunk in chunks:
                await event.reply(chunk)
                await asyncio.sleep(0.5)
                
    except Exception as e:
        logger.error(f"GPT error: {str(e)}")
        await event.reply("üòµ‚Äçüí´ –ë–ª–∏–Ω, –≥–æ–ª–æ–≤–∞ –±–æ–ª–∏—Ç... –°–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ–ª–µ–≥—á–µ!")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await history_manager.init_db()
    await client.start(bot_token=BOT_TOKEN)
    logger.info("üü£ –ß–µ–ª–æ–≤–µ–∫–æ–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await client.run_until_disconnected()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üî¥ –í—ã–∫–ª—é—á–µ–Ω–∏–µ...")
    finally:
        asyncio.run(history_manager.close())
