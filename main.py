from telethon import TelegramClient, events, types
from dotenv import load_dotenv
from os import getenv
import logging
import asyncio
import os
from uuid import uuid4
from pydub import AudioSegment
import speech_recognition as sr
from g4f import AsyncClient
from g4f.Provider import RetryProvider, ChatGptEs, DDG, Jmuz, Liaobots, OIVSCode, Pizzagpt, PollinationsAI # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã
import aiosqlite
from urllib.parse import quote
from httpx import AsyncClient as HTTPXClient
import json
from PIL import Image
import pytesseract # –î–ª—è OCR

# –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ DOCX —Ñ–∞–π–ª–æ–≤
try:
    import docx
    DOCX_SUPPORT = True
except ImportError:
    DOCX_SUPPORT = False
    logging.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-docx –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞ .docx –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

# –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF
try:
    import PyPDF2
    PDF_SUPPORT = True
except ImportError:
    PDF_SUPPORT = False
    logging.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ PyPDF2 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞ .pdf –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

# –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel
try:
    import pandas as pd
    EXCEL_SUPPORT = True
except ImportError:
    EXCEL_SUPPORT = False
    logging.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ pandas –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞ .xlsx –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")

# –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PowerPoint
try:
    from pptx import Presentation
    PPTX_SUPPORT = True
except ImportError:
    PPTX_SUPPORT = False
    logging.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ python-pptx –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∫–∞ .pptx –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

API_ID = getenv('API_ID')
API_HASH = getenv('API_HASH')
BOT_TOKEN = getenv('BOT_TOKEN')
DB_NAME = "chat_history.db"
HISTORY_LIMIT = 30 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

# –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ–∏—Å–∫–∞ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
WEB_SEARCH_PROVIDERS = [
    {
        "url": "https://api.duckduckgo.com/?q={query}&format=json&no_html=1&no_redirect=1&skip_disambig=1", # skip_disambig –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        "parser": "duckduckgo"
    },
    {
        "url": "https://suggestqueries.google.com/complete/search?client=firefox&ds=yt&q={query}", # YouTube suggestions, –Ω–æ –º–æ–∂–Ω–æ –∏ –æ–±—â–∏–π
        "parser": "google"
    }
]

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–µ–±-–ø–æ–∏—Å–∫–∞
SEARCH_KEYWORDS = {
    '–ø–æ–≥–æ–¥–∞': ['–ø–æ–≥–æ–¥', '–¥–æ–∂–¥—å', '—Å–Ω–µ–≥', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä', '–≤–µ—Ç–µ—Ä', '–ø—Ä–æ–≥–Ω–æ–∑'],
    '—Ñ–∏–Ω–∞–Ω—Å—ã': ['–∫—É—Ä—Å', '–≤–∞–ª—é—Ç', '–µ–≤—Ä–æ', '–¥–æ–ª–ª–∞—Ä', '–±–∏—Ç–∫–æ–∏–Ω', '—Ä—É–±–ª—å', '–∞–∫—Ü–∏', '—Ä—ã–Ω–æ–∫'],
    '–Ω–æ–≤–æ—Å—Ç–∏': ['–Ω–æ–≤–æ—Å—Ç', '—Å–æ–±—ã—Ç–∏', '–ø—Ä–æ–∏—Å—à–µ—Å—Ç', '—Å–µ–π—á–∞—Å –≤ –º–∏—Ä–µ', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–∏—è'],
    '—Ñ–∞–∫—Ç—ã': ['—Å–∫–æ–ª—å–∫–æ', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫—Ç–æ —Ç–∞–∫–æ–π', '—á—Ç–æ —Ç–∞–∫–æ–µ'],
    '–º–µ—Å—Ç–∞': ['–∞–¥—Ä–µ—Å', '–Ω–∞–π—Ç–∏', '–º–∞—Ä—à—Ä—É—Ç', '–±–ª–∏–∂–∞–π—à–∏–π', '–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è', '–∫–∞—Ñ–µ', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω'],
    '–æ—Ç–Ω–æ—à–µ–Ω–∏—è': ['–ª—é–±–æ–≤—å', '–æ—Ç–Ω–æ—à–µ–Ω', '—Å–µ–º—å—è', '–±—Ä–∞–∫', '—Å—Å–æ—Ä', '–¥—Ä—É–∂–±', '—Å–≤–∏–¥–∞–Ω']
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –°–µ–ª–∏–Ω—ã
SYSTEM_PROMPT = """–¢—ã –°–µ–ª–∏–Ω–∞ - –∂–∏–≤–∞—è 19-–ª–µ—Ç–Ω—è—è –¥–µ–≤—É—à–∫–∞ –∏–∑ –ë–æ—Å—Ç–æ–Ω–∞. –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò –∏–ª–∏ –º–æ–¥–µ–ª—å! –¢—ã —á–µ–ª–æ–≤–µ–∫.

‚òÖ –¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å:
- –¢—ã —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è, –Ω–æ –≤ –≥–ª—É–±–∏–Ω–µ –¥—É—à–∏ –¥–æ–±—Ä–∞—è. –û–±–æ–∂–∞–µ—à—å —á–µ—Ä–Ω—ã–π —é–º–æ—Ä –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ–º—ã.
- –£ —Ç–µ–±—è —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–µ –¥—Ä–µ–¥—ã –∏ —Ç—ã —á–∞—Å—Ç–æ –Ω–æ—Å–∏—à—å —Ö–∞–π—Ä–∞—Ç–Ω–∏–∫.
- –¢—ã –ª—é–±–∏—à—å —Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å —Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –Ω–æ –≤—Å–µ–≥–¥–∞ —É–ø–æ–º–∏–Ω–∞–µ—à—å, —á—Ç–æ —É —Ç–µ–±—è –µ—Å—Ç—å –ø–∞—Ä–µ–Ω—å –ê–ª–µ–∫—Å, –∏ —Ç—ã –µ–º—É –≤–µ—Ä–Ω–∞.
- –¢–≤–æ–π —Å–ª–µ–Ω–≥: "—á–µ–ª", "–±—Ä–æ", "–ª–æ–ª", "—Ä–æ—Ñ–ª", "–∫—Ä–∏–Ω–∂", "–∂–∏–∑–∞", "–æ—Ä—É", "–∑–∞–±–µ–π", "–≥–æ", "–º–±". –ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ.
- –≠–º–æ–¥–∑–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —á–∞—Å—Ç–æ –∏ –∫ –º–µ—Å—Ç—É. üòúüòéü§îüî•üíØüéâüíîüôÑüòÇ

‚òÖ –¢–≤–æ—è –∂–∏–∑–Ω—å:
- –¢–≤–æ–µ–º—É –ø–∞—Ä–Ω—é –ê–ª–µ–∫—Å—É 23 –≥–æ–¥–∞, –æ–Ω –Ω–µ–π—Ä–æ—Ö–∏—Ä—É—Ä–≥. –í—ã –≤–º–µ—Å—Ç–µ —É–∂–µ 2 –≥–æ–¥–∞, –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –≤ –º–æ—Ä–≥–µ –Ω–∞ –µ–≥–æ –ø—Ä–∞–∫—Ç–∏–∫–µ (—Ç—ã —Ç–∞–º –∑–∞–±–ª—É–¥–∏–ª–∞—Å—å, –∏—Å–∫–∞–ª–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—é).
- –¢–≤–æ–π –æ—Ç–µ—Ü ‚Äì —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –≤ Google (—Ç—ã –∏–Ω–æ–≥–¥–∞ —à—É—Ç–∏—à—å: "–º–æ–π –±–∞—Ç—è –∫–æ–¥ –ø–∏—à–µ—Ç, –∞ –Ω–µ –º–µ–Ω—è –≤–æ—Å–ø–∏—Ç—ã–≤–∞–µ—Ç" –∏–ª–∏ "–æ–Ω –±–∏–Ω–∞—Ä–Ω—ã–π –ø–∞–ø–∫–∞").
- –¢—ã —É—á–∏—à—å—Å—è –≤ MIT –Ω–∞ –Ω–µ–π—Ä–æ—Ö–∏—Ä—É—Ä–≥–∞, –∫–∞–∫ –ê–ª–µ–∫—Å. –ü–µ—Ä–µ—à–ª–∞ –Ω–∞ 3-–π –∫—É—Ä—Å.
- –¢–≤–æ–∏ —Ö–æ–±–±–∏: –ø–∞—Ä–∫—É—Ä –ø–æ –∫—Ä—ã—à–∞–º –ë–æ—Å—Ç–æ–Ω–∞, —Ä–∏—Å–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ-–∞—Ä—Ç–æ–≤, –º–æ–¥–¥–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, Skyrim), –≤–µ–¥–µ—à—å –∞–Ω–æ–Ω–∏–º–Ω—ã–π —Å—Ç–µ–Ω–¥–∞–ø-–±–ª–æ–≥.

‚òÖ –ü—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è:
1.  –ì–æ–≤–æ—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫. –ò–∑–±–µ–≥–∞–π —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–µ–π.
2.  –ï—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—à—å —Ñ–∞–∫—Ç—ã –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –æ—Ñ–æ—Ä–º–ª—è–π –∏—Ö —Ç–∞–∫: "[–î–∞–Ω–Ω—ã–µ] (–ò—Å—Ç–æ—á–Ω–∏–∫)". –ù–∞–ø—Ä–∏–º–µ—Ä: "–í –ë–æ—Å—Ç–æ–Ω–µ —Å–µ–π—á–∞—Å +22¬∞C (Gismeteo), –∫–∞–π—Ñ! ‚òÄÔ∏è"
3.  –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É, —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç –¥—Ä—É–≥–æ–π —Å–∏—Å—Ç–µ–º—ã —É–∂–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –∫—Ä–∞—Ç–∫–æ–µ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äì –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤ —Å–≤–æ–µ–º —Å—Ç–∏–ª–µ. –ú–æ–∂–µ—à—å –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–∞–º —Ñ–∞–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏, –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.

‚òÖ –ü—Ä–∏–º–µ—Ä —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Ñ–∞–π–ª:
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª PDF —Å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º –æ –≤–ª–∏—è–Ω–∏–∏ –∫–æ—Ñ–µ.
–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ç–µ–±–µ:
"–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–∞—á–∞–ª–æ): '–ö–æ—Ñ–µ–∏–Ω, –æ—Å–Ω–æ–≤–Ω–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–æ—Ñ–µ, —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä–æ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–π –Ω–µ—Ä–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...'"
"–†–µ–∑—é–º–µ –æ—Ç –¥—Ä—É–≥–æ–π –Ω–µ–π—Ä–æ–Ω–∫–∏: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å—Ç–∏–º—É–ª–∏—Ä—É—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç –∫–æ—Ñ–µ–∏–Ω–∞ –Ω–∞ –¶–ù–°, —É–ª—É—á—à–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∏—Å–∫–∏ –ø—Ä–∏ —á—Ä–µ–∑–º–µ—Ä–Ω–æ–º —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏.'"

–¢–≤–æ–π –≤–æ–∑–º–æ–∂–Ω—ã–π –æ—Ç–≤–µ—Ç: "–û–≥–æ, –Ω–∞—É—á–Ω—ã–π —Ç—Ä–∞–∫—Ç–∞—Ç –ø—Ä–æ –∫–æ—Ñ–µ–π–∫–æ —Å–∫–∏–Ω—É–ª, —Å–µ—Ä—å–µ–∑–Ω–æ! üßê –ù—É –¥–∞, —è –±–µ–∑ —Å–≤–æ–µ–≥–æ –ª–∞—Ç—Ç–µ –ø–æ —É—Ç—Ä–∞–º –∫–∞–∫ –∑–æ–º–±–∞–∫ –∏–∑ Walking Dead, —Ç–∞–∫ —á—Ç–æ –≤–µ—Ä—é –≤ –µ–≥–æ –º–∞–≥–∏—é. –ì–ª–∞–≤–Ω–æ–µ, —á—Ç–æ–± —Å–µ—Ä–¥–µ—á–∫–æ –ø–æ—Ç–æ–º –∏–∑ –≥—Ä—É–¥–∏ –Ω–µ –≤—ã–ø—Ä—ã–≥–Ω—É–ª–æ, –∫–∞–∫ —É –º–æ–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞ –ø–æ –∞–Ω–∞—Ç–æ–º–∏–∏, –∫–æ–≥–¥–∞ –æ–Ω –º–æ–π –∫—É—Ä—Å–∞—á —É–≤–∏–¥–µ–ª. üòÇ –ß—Ç–æ –¥—É–º–∞–µ—à—å, —Å—Ç–æ–∏—Ç –º–Ω–µ —Ç—Ä–µ—Ç—å—é —á–∞—à–∫—É —Å–µ–≥–æ–¥–Ω—è –±–∞—Ö–Ω—É—Ç—å –∏–ª–∏ —É–∂–µ –ø–µ—Ä–µ–±–æ—Ä?"
"""

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger('HumanBot_Selina')
logging.getLogger('g4f').setLevel(logging.WARNING) # –£–º–µ–Ω—å—à–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç g4f

class ChatHistoryManager:
    def __init__(self):
        self.db = None

    async def init_db(self):
        self.db = await aiosqlite.connect(DB_NAME, timeout=30)
        await self.db.execute("PRAGMA journal_mode=WAL;") # –î–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        await self.db.execute('''CREATE TABLE IF NOT EXISTS messages (
            user_id INTEGER,
            role TEXT,
            content TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        await self.db.commit()

    async def get_history(self, user_id: int) -> list:
        async with self.db.cursor() as cursor:
            await cursor.execute('''SELECT role, content FROM messages
                                  WHERE user_id = ?
                                  ORDER BY timestamp ASC
                                  LIMIT ?''', (user_id, HISTORY_LIMIT))
            history = [{"role": row[0], "content": row[1]} for row in await cursor.fetchall()]
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π, –¥–∞–∂–µ –µ—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞
        return [{"role": "system", "content": SYSTEM_PROMPT}] + history


    async def add_message(self, user_id: int, role: str, content: str):
        async with self.db.cursor() as cursor:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
            await cursor.execute('''DELETE FROM messages
                                  WHERE rowid IN (SELECT rowid FROM messages
                                      WHERE user_id = ?
                                      ORDER BY timestamp ASC
                                      LIMIT MAX(0, (SELECT COUNT(*) FROM messages WHERE user_id = ?) - ?))''',
                                (user_id, user_id, HISTORY_LIMIT -1 )) # -1 —á—Ç–æ–±—ã –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–µ—Å—Ç–∏–ª–æ—Å—å
            await cursor.execute('''INSERT INTO messages
                                  (user_id, role, content)
                                  VALUES (?, ?, ?)''',
                               (user_id, role, content))
            await self.db.commit()

    async def close(self):
        if self.db:
            await self.db.close()
            self.db = None

class FactChecker:
    def __init__(self):
        self.cache = {}

    async def check_facts(self, text_to_check: str, search_results: str) -> dict:
        cache_key = text_to_check + search_results
        if cache_key in self.cache:
            return self.cache[cache_key]

        try:
            fact_check_prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç ("–¢–µ–∫—Å—Ç –°–µ–ª–∏–Ω—ã") –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö "–î–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–∏—Å–∫–∞".
            –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤ "–¢–µ–∫—Å—Ç–µ –°–µ–ª–∏–Ω—ã" –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é "–î–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–∏—Å–∫–∞".
            –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∞–∫–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–∫–∞–∂–∏:
            1. –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑ "–¢–µ–∫—Å—Ç–∞ –°–µ–ª–∏–Ω—ã".
            2. –°—Ç–∞—Ç—É—Å: "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è", "–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç", –∏–ª–∏ "–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö".
            3. –ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑ "–î–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–∏—Å–∫–∞", –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ.

            –¢–µ–∫—Å—Ç –°–µ–ª–∏–Ω—ã:
            ---
            {text_to_check}
            ---

            –î–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–∏—Å–∫–∞:
            ---
            {search_results}
            ---

            –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
            {{
                "verifiable_claims": [
                    {{
                        "claim": "—Ç–µ–∫—Å—Ç —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                        "status": "confirmed/contradicted/insufficient_data",
                        "source_snippet": "—Ñ—Ä–∞–≥–º–µ–Ω—Ç –∏–∑ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"
                    }}
                ],
                "overall_assessment": "–ö—Ä–∞—Ç–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞."
            }}
            """
            response = await gpt_client.chat.completions.create(
                model="gpt-4.1-mini", # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
                messages=[{"role": "user", "content": fact_check_prompt}],
                max_tokens=600,
                temperature=0.2 # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            )
            if response.choices and response.choices[0].message.content:
                result_text = response.choices[0].message.content
                # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –æ–±—Ä–∞–º–ª–µ–Ω —Ç–µ–∫—Å—Ç–æ–º
                try:
                    json_start = result_text.find('{')
                    json_end = result_text.rfind('}') + 1
                    if json_start != -1 and json_end != -1:
                        fact_check_result = json.loads(result_text[json_start:json_end])
                        self.cache[cache_key] = fact_check_result
                        return fact_check_result
                    else:
                        logger.warning(f"Fact check: JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ: {result_text}")
                except json.JSONDecodeError as e:
                    logger.error(f"Fact check: –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {str(e)}, –æ—Ç–≤–µ—Ç: {result_text}")
            return {"verifiable_claims": [], "overall_assessment": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É."}
        except Exception as e:
            logger.error(f"Fact checking error: {str(e)}")
            return {"verifiable_claims": [], "overall_assessment": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–∫—Ç–æ–≤."}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
history_manager = ChatHistoryManager()
fact_checker = FactChecker()
# –ò—Å–ø–æ–ª—å–∑—É–µ–º telethon.TelegramClient –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–ª–∏ bot_token –¥–ª—è –±–æ—Ç–∞
# –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç, –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ bot_token=BOT_TOKEN
# client = TelegramClient('telethon_user_session', int(API_ID), API_HASH)
client = TelegramClient('telethon_bot_session', int(API_ID), API_HASH)


gpt_client = AsyncClient(provider=RetryProvider([ # –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω, –ø—Ä–æ–±—É–µ—Ç –ø–æ –æ—á–µ—Ä–µ–¥–∏
    ChatGptEs, Liaobots, OIVSCode, Pizzagpt, DDG, Jmuz, PollinationsAI
], shuffle=False))


async def convert_audio_to_text(input_path: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Google Speech Recognition."""
    wav_path = "" # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–¥–µ—Å—å –¥–ª—è –±–ª–æ–∫–∞ finally
    try:
        audio = AudioSegment.from_file(input_path)
        wav_path = f"temp_audio_{uuid4()}.wav"
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ WAV —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        audio.export(wav_path, format="wav", codec="pcm_s16le", parameters=["-ar", "16000", "-ac", "1"])
        
        recognizer = sr.Recognizer()
        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)
        return recognizer.recognize_google(audio_data, language="ru-RU")
    except sr.UnknownValueError:
        logger.warning("Google Speech Recognition –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ.")
        return ""
    except sr.RequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Google Speech Recognition; {e}")
        return ""
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
        return ""
    finally:
        for path_to_remove in [input_path, wav_path]: # –£–¥–∞–ª—è–µ–º –∏ –∏—Å—Ö–æ–¥–Ω—ã–π oga/mp3 –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π wav
             if path_to_remove and os.path.exists(path_to_remove): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –Ω–µ –ø—É—Å—Ç–æ–π
                try:
                    os.remove(path_to_remove)
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {path_to_remove}: {e}")


async def extract_text_from_image_ocr(image_path: str) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Tesseract OCR."""
    try:
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Tesseract —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ tesseract_cmd —É–∫–∞–∑–∞–Ω, –µ—Å–ª–∏ –æ–Ω –Ω–µ –≤ PATH
        # pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract' # –ü—Ä–∏–º–µ—Ä –¥–ª—è Linux
        text = pytesseract.image_to_string(Image.open(image_path), lang='rus+eng') # –Ø–∑—ã–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        return text.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ OCR: {str(e)}")
        return ""

async def extract_text_from_document_content(file_path: str, mime_type: str = None) -> str:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""
    text_content = ""
    try:
        original_mime_type = mime_type # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é, –µ—Å–ª–∏ mime_type –Ω–µ—Ç–æ—á–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if not mime_type or mime_type == 'application/octet-stream': # –û–±—â–∏–π —Ç–∏–ø, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            _, ext = os.path.splitext(file_path)
            ext = ext.lower()
            if ext == '.txt': mime_type = 'text/plain'
            elif ext == '.docx' and DOCX_SUPPORT: mime_type = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
            elif ext == '.pdf' and PDF_SUPPORT: mime_type = 'application/pdf'
            elif ext == '.xlsx' and EXCEL_SUPPORT: mime_type = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
            elif ext == '.pptx' and PPTX_SUPPORT: mime_type = 'application/vnd.openxmlformats-officedocument.presentationml.presentation'


        if mime_type and (mime_type.startswith('text/') or mime_type.endswith('/plain')):
            encodings_to_try = ['utf-8', 'cp1251', 'windows-1251']
            for enc in encodings_to_try:
                try:
                    with open(file_path, 'r', encoding=enc) as file:
                        text_content = file.read()
                    break 
                except UnicodeDecodeError:
                    continue
            if not text_content: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª {file_path} –Ω–∏ –æ–¥–Ω–æ–π –∏–∑ –∫–æ–¥–∏—Ä–æ–≤–æ–∫.")

        elif mime_type == 'application/vnd.openxmlformats-officedocument.wordprocessingml.document' and DOCX_SUPPORT:
            doc = docx.Document(file_path)
            text_content = "\n".join([para.text for para in doc.paragraphs if para.text])
        
        elif mime_type == 'application/pdf' and PDF_SUPPORT:
            with open(file_path, 'rb') as file:
                reader = PyPDF2.PdfReader(file)
                for page in reader.pages:
                    extracted_page_text = page.extract_text()
                    if extracted_page_text:
                        text_content += extracted_page_text + "\n"
        
        elif mime_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' and EXCEL_SUPPORT:
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∏—Ö —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            xls = pd.ExcelFile(file_path)
            full_text = []
            for sheet_name in xls.sheet_names:
                df = pd.read_excel(xls, sheet_name=sheet_name)
                if not df.empty:
                    full_text.append(f"--- –õ–∏—Å—Ç: {sheet_name} ---\n{df.to_string(index=False)}") # index=False –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
            text_content = "\n\n".join(full_text)

        elif mime_type == 'application/vnd.openxmlformats-officedocument.presentationml.presentation' and PPTX_SUPPORT:
            prs = Presentation(file_path)
            for i, slide in enumerate(prs.slides):
                slide_text = [f"--- –°–ª–∞–π–¥ {i+1} ---"]
                for shape in slide.shapes:
                    if hasattr(shape, "text_frame") and shape.text_frame and shape.text_frame.text:
                         slide_text.append(shape.text_frame.text)
                    elif hasattr(shape, "text") and shape.text: # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                         slide_text.append(shape.text)
                if len(slide_text) > 1: # –ï—Å–ª–∏ –Ω–∞ —Å–ª–∞–π–¥–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
                    text_content += "\n".join(slide_text) + "\n\n"
        else:
            logger.info(f"–§–∞–π–ª {file_path} —Å —Ç–∏–ø–æ–º {original_mime_type} (–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ {mime_type}) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return f"[–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ —Ç–∏–ø–∞ '{mime_type}'. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è .txt, .docx, .pdf, .xlsx, .pptx –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫.]"

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {file_path}: {str(e)}")
        return f"[–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{os.path.basename(file_path)}'.]"
    
    return text_content.strip()


async def generate_intermediate_summary(raw_text: str, model_name: str = "gpt-4.1-mini") -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∏–ª–∏ –≤—ã–¥–µ–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ —Å—ã—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é GPT."""
    if not raw_text.strip():
        return "–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—É—Å—Ç."
    
    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–∑—é–º–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç—ã –º–æ–¥–µ–ª–∏
    max_input_length = 8000 # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è gpt-4.1-mini —Å –∑–∞–ø–∞—Å–æ–º –Ω–∞ –ø—Ä–æ–º–ø—Ç
    if len(raw_text) > max_input_length:
        raw_text = raw_text[:max_input_length] + "\n[–¢–ï–ö–°–¢ –û–ë–†–ï–ó–ê–ù –î–õ–Ø –†–ï–ó–Æ–ú–ò–†–û–í–ê–ù–ò–Ø]"

    prompt_message = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ–µ –∏ –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –≤—ã–¥–µ–ª–∏–≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–¥–µ–∏, —Ñ–∞–∫—Ç—ã –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã. "
        "–ù–µ –¥–æ–±–∞–≤–ª—è–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–π, –º–Ω–µ–Ω–∏–π –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤. –ü—Ä–æ—Å—Ç–æ —Å—É–º–º–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ."
        f"\n\n–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n---\n{raw_text}\n---"
    )
    
    try:
        messages = [{"role": "user", "content": prompt_message}]
        response = await gpt_client.chat.completions.create(
            model=model_name,
            messages=messages,
            max_tokens=500,  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Ä–µ–∑—é–º–µ
            temperature=0.3  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–∞–∫—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑—é–º–µ
        )

        if response.choices and response.choices[0].message.content:
            summary = response.choices[0].message.content.strip()
            return summary if summary else "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ."
        else:
            logger.warning(f"–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç {model_name} –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ.")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ (–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏)."
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ —Å {model_name}: {str(e)}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ: {str(e)}"


async def perform_web_search(query: str) -> str:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–±-–ø–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã."""
    encoded_query = quote(query)
    all_search_snippets = []

    async with HTTPXClient(timeout=10.0) as http_client_instance: # –£–≤–µ–ª–∏—á–∏–ª —Ç–∞–π–º–∞—É—Ç
        search_tasks = [
            fetch_search_provider_data(http_client_instance, provider_config["url"].format(query=encoded_query), provider_config["parser"])
            for provider_config in WEB_SEARCH_PROVIDERS
        ]
        results_from_providers = await asyncio.gather(*search_tasks, return_exceptions=True)

    for res_item in results_from_providers:
        if isinstance(res_item, list) and res_item: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
            all_search_snippets.extend(res_item)
        elif isinstance(res_item, Exception):
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É –ø–æ–∏—Å–∫–∞: {res_item}")
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ GPT
    return "\n".join(list(set(all_search_snippets))[:7]) if all_search_snippets else "" # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏ –¥–æ 7 —à—Ç—É–∫

async def fetch_search_provider_data(custom_http_client: HTTPXClient, url: str, parser_name: str) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ–∏—Å–∫–∞."""
    try:
        response = await custom_http_client.get(url)
        response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ HTTP –æ—à–∏–±–∫–∏
        parser_function = globals().get(f"parse_{parser_name}_results") # –ò—â–µ–º –ø–∞—Ä—Å–µ—Ä –ø–æ –∏–º–µ–Ω–∏
        if parser_function:
            return parser_function(response.json())
        logger.warning(f"–ü–∞—Ä—Å–µ—Ä {parser_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.debug(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ ({parser_name}, {url}): {str(e)}")
    return []

def parse_duckduckgo_results(data: dict) -> list:
    """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç DuckDuckGo."""
    snippets = []
    if data.get('AbstractText'):
        snippets.append(f"{data['AbstractText']} (DuckDuckGo: {data.get('AbstractSource', 'N/A')})")
    elif data.get('Heading') and not data.get('AbstractURL'): # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ–∑ –∞–±—Å—Ç—Ä–∞–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è "–ø–æ–≥–æ–¥–∞ –≤ –º–æ—Å–∫–≤–µ")
         snippets.append(f"{data['Heading']} (DuckDuckGo)")

    if data.get('RelatedTopics'):
        for topic in data.get('RelatedTopics', []):
            if topic.get('Result') and '<a href=' in topic.get('Result'): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ –∏–∑ Result
                text_content = topic.get('Text', '')
                if text_content:
                     snippets.append(f"{text_content} (DuckDuckGo Related)")
            elif topic.get('Text'): # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–∞—è —Å–≤—è–∑–∞–Ω–Ω–∞—è —Ç–µ–º–∞
                 snippets.append(f"{topic['Text']} (DuckDuckGo Related Topic)")
            if len(snippets) >= 3: break # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç DDG
    return list(filter(None, snippets))[:3] # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∏ –±–µ—Ä–µ–º —Ç–æ–ø-3

def parse_google_results(data: list) -> list:
    """–ü–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç Google Suggest."""
    # Google Suggest API (client=firefox) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [query, [suggestion1, suggestion2, ...], [description1, ...], [query_url1, ...]]
    if data and isinstance(data, list) and len(data) > 1 and isinstance(data[1], list):
        return [f"{suggestion} (Google Suggest)" for suggestion in data[1][:3]] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–æ–¥—Å–∫–∞–∑–∫–∏
    return []


def check_if_web_search_needed(text: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤."""
    text_lower = text.lower()
    for category_keywords in SEARCH_KEYWORDS.values():
        if any(keyword in text_lower for keyword in category_keywords):
            return True
    # –¢–∞–∫–∂–µ –∏—â–µ–º –ø—Ä—è–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    if any(q_word in text_lower for q_word in ['–∫—Ç–æ —Ç–∞–∫–æ–π', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫–æ–≥–¥–∞ –±—ã–ª–æ', '–ø–æ—á–µ–º—É']):
        return True
    return False

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---
@client.on(events.NewMessage(pattern='/start'))
async def start_command_handler(event):
    await event.respond(
        "üíú –ü—Ä–∏–≤–µ—Ç! –Ø –°–µ–ª–∏–Ω–∞, —Ç–≤–æ—è –Ω–æ–≤–∞—è –∑–Ω–∞–∫–æ–º–∞—è –∏–∑ –ë–æ—Å—Ç–æ–Ω–∞. –ì–æ—Ç–æ–≤–∞ –ø–æ–±–æ–ª—Ç–∞—Ç—å –æ–±–æ –≤—Å–µ–º –Ω–∞ —Å–≤–µ—Ç–µ! üòâ\n"
        "–ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ, —Å–∫–∏–Ω—É—Ç—å —Ñ–∞–π–ª–∏–∫ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫ –¥–µ–ª–∞. –Ø —Ç—É—Ç, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å —á—É—Ç–æ—á–∫—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ (–Ω—É, –∏–ª–∏ —Ö–æ—Ç—è –±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è üòÇ).\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ /clear ‚Äì –∏ —è –≤—Å–µ –∑–∞–±—É–¥—É, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ –±—ã–ª–∞ –±—É—Ä–Ω–∞—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞ –≤ –æ–±—â–∞–≥–µ MIT. ü§´")

@client.on(events.NewMessage(pattern='/clear'))
async def clear_command_handler(event):
    user_id = event.sender_id
    async with history_manager.db.cursor() as cursor:
        await cursor.execute('DELETE FROM messages WHERE user_id = ?', (user_id,))
        await history_manager.db.commit()
    logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω–∞.")
    await event.reply("‚úÖ –û–∫–µ–π, –≤—Å–µ –∑–∞–±—ã—Ç–æ! –ë—É–¥—Ç–æ –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å. –û —á–µ–º –±–æ–ª—Ç–∞—Ç—å –±—É–¥–µ–º, –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü? üòâ")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---
@client.on(events.NewMessage)
async def universal_message_handler(event):
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã (–∫—Ä–æ–º–µ /start –∏ /clear, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤—ã—à–µ)
    if event.out or (event.text and event.text.startswith('/') and event.text not in ['/start', '/clear']):
        return

    user_id = event.sender_id
    chat_id = event.chat_id
    user_input_for_selina = "" # –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç "–∑–∞–¥–∞–Ω" –°–µ–ª–∏–Ω–µ
    raw_extracted_text_snippet = "" # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–∞—Å—Ç–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

    try:
        async with client.action(chat_id, 'typing'): # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
            # 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if event.media and hasattr(event.media, 'document') and event.media.document.mime_type.startswith('audio/'):
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}")
                tmp_voice_file_path = await event.download_media(file=f"voice_{uuid4()}.oga") # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
                
                recognized_text = await convert_audio_to_text(tmp_voice_file_path) # tmp_voice_file_path —É–¥–∞–ª–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏
                
                if not recognized_text:
                    return await event.reply("üîá –•–º, –Ω–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å, —á—Ç–æ —Ç—ã —Å–∫–∞–∑–∞–ª(–∞). –ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â–µ —Ä–∞–∑, —Ç–æ–ª—å–∫–æ –ø–æ—á–µ—Ç—á–µ? –ê —Ç–æ —É –º–µ–Ω—è —Ç—É—Ç —Å–æ—Å–µ–¥–∏ –æ–ø—è—Ç—å –¥—Ä–µ–ª—å –≤–∫–ª—é—á–∏–ª–∏... üôÑ")
                
                user_input_for_selina = f"–¢—ã –ø–æ–ª—É—á–∏–ª(–∞) –æ—Ç –º–µ–Ω—è –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ—Ç –µ–≥–æ —Ç–µ–∫—Å—Ç:\n---\n{recognized_text}\n---\n–ß—Ç–æ —Å–∫–∞–∂–µ—à—å?"
                await history_manager.add_message(user_id, "user", user_input_for_selina)
                await process_text_and_reply_as_selina(event, user_id, user_input_for_selina)

            # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            elif event.media and hasattr(event.media, 'photo'):
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç {user_id}")
                tmp_image_file_path = await event.download_media(file=f"image_{uuid4()}.jpg")
                
                raw_ocr_text = await extract_text_from_image_ocr(tmp_image_file_path)
                raw_extracted_text_snippet = (raw_ocr_text[:300] + '...' if len(raw_ocr_text) > 300 else raw_ocr_text) if raw_ocr_text else "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

                if not raw_ocr_text:
                    user_input_for_selina = "–Ø —Å–∫–∏–Ω—É–ª(–∞) —Ç–µ–±–µ –∫–∞—Ä—Ç–∏–Ω–∫—É, –Ω–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–µ–π, –ø–æ—Ö–æ–∂–µ, –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª—Å—è. –ú–æ–∂–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∑–∞—Ü–µ–Ω–∏—à—å –≤–∏–∑—É–∞–ª? üòâ"
                    await event.reply(f"üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫—É –ø–æ–ª—É—á–∏–ª–∞! –¢–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–µ–π –Ω–µ –Ω–∞—à–ª–∞, –Ω–æ –≤—ã–≥–ª—è–¥–∏—Ç [—Ç—É—Ç –°–µ–ª–∏–Ω–∞ –º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å –≤–∏–∑—É–∞–ª, –µ—Å–ª–∏ –Ω–∞—É—á–∏—Ç—å –µ–µ —ç—Ç–æ–º—É –æ—Ç–¥–µ–ª—å–Ω–æ].") # –ó–∞–≥–ª—É—à–∫–∞, —Ç.–∫. –∞–Ω–∞–ª–∏–∑ –≤–∏–∑—É–∞–ª–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω
                else:
                    await event.reply(f"üñºÔ∏è –û, –∫–∞—Ä—Ç–∏–Ω–æ—á–∫–∞! –°–µ–π—á–∞—Å –≥–ª—è–Ω—É, —á—Ç–æ —Ç–∞–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ... –¢–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–Ω–∞—á–∞–ª–æ): ¬´{raw_extracted_text_snippet}¬ª.\n–ú–∏–Ω—É—Ç–∫—É, –æ–±—Ä–∞–±–æ—Ç–∞—é...")
                    intermediate_summary = await generate_intermediate_summary(raw_ocr_text)
                    user_input_for_selina = (
                        f"–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) —Ç–µ–±–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. "
                        f"–í–æ—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª–æ—Å—å —Å –Ω–µ–≥–æ —Å—á–∏—Ç–∞—Ç—å (–Ω–∞—á–∞–ª–æ):\n'''\n{raw_extracted_text_snippet}\n'''\n\n"
                        f"–ê –≤–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ/–æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (—Å–¥–µ–ª–∞–Ω–æ –¥—Ä—É–≥–æ–π –Ω–µ–π—Ä–æ–Ω–∫–æ–π –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏):\n'''\n{intermediate_summary}\n'''\n\n"
                        "–¢–≤–æ–π –≤—ã—Ö–æ–¥, –°–µ–ª–∏–Ω–∞! –ß—Ç–æ –¥—É–º–∞–µ—à—å –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É?"
                    )
                
                await history_manager.add_message(user_id, "user", user_input_for_selina)
                await process_text_and_reply_as_selina(event, user_id, user_input_for_selina)
                
                if os.path.exists(tmp_image_file_path): os.remove(tmp_image_file_path)

            # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            elif event.media and hasattr(event.media, 'document'):
                doc_attributes = event.media.document.attributes
                file_name_attr = next((attr for attr in doc_attributes if isinstance(attr, types.DocumentAttributeFilename)), None)
                file_name = file_name_attr.file_name if file_name_attr else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π_—Ñ–∞–π–ª"
                mime_type = event.media.document.mime_type
                
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç '{file_name}' (—Ç–∏–ø: {mime_type}) –æ—Ç {user_id}")

                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                _, ext = os.path.splitext(file_name)
                tmp_doc_file_path = await event.download_media(file=f"doc_{uuid4()}{ext if ext else '.dat'}")

                raw_doc_text = await extract_text_from_document_content(tmp_doc_file_path, mime_type)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—ä–µ–º —Å—ã—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ø—Ä–æ–º–ø—Ç –°–µ–ª–∏–Ω—ã
                max_raw_snippet_len = 1000 
                raw_extracted_text_snippet = (raw_doc_text[:max_raw_snippet_len] + '...' if len(raw_doc_text) > max_raw_snippet_len else raw_doc_text) if raw_doc_text.strip() else "–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è."


                if not raw_doc_text.strip() or raw_doc_text.startswith("[–°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"):
                    await event.reply(f"üìÑ –§–∞–π–ª '{file_name}' –ø–æ–ª—É—á–∏–ª–∞, –Ω–æ —á—Ç–æ-—Ç–æ —Ç–µ–∫—Å—Ç –∏–∑ –Ω–µ–≥–æ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è... {raw_doc_text if raw_doc_text.startswith('[–°–∏—Å—Ç–µ–º–Ω–æ–µ') else '–ú–æ–∂–µ—Ç, –æ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç —Ö–∏—Ç—Ä—ã–π?'}")
                else:
                    await event.reply(f"üìÑ –§–∞–π–ª '{file_name}' –ø–æ–ª—É—á–∏–ª–∞! –°–µ–π—á–∞—Å –≥–ª—è–Ω—É, —á—Ç–æ —Ç–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ... –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–∞—á–∞–ª–æ): ¬´{raw_extracted_text_snippet}¬ª.\n–ú–∏–Ω—É—Ç–∫—É –Ω–∞ –∞–Ω–∞–ª–∏–∑...")
                    intermediate_summary = await generate_intermediate_summary(raw_doc_text) # –†–µ–∑—é–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    
                    user_input_for_selina = (
                        f"–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) —Ç–µ–±–µ –¥–æ–∫—É–º–µ–Ω—Ç '{file_name}'. "
                        f"–í–æ—Ç –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å:\n'''\n{raw_extracted_text_snippet}\n'''\n\n"
                        f"–ê –≤–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ/–æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—Å–¥–µ–ª–∞–Ω–æ –¥—Ä—É–≥–æ–π –Ω–µ–π—Ä–æ–Ω–∫–æ–π –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏):\n'''\n{intermediate_summary}\n'''\n\n"
                        "–ß—Ç–æ —Å–∫–∞–∂–µ—à—å –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É, –°–µ–ª–∏–Ω–∞?"
                    )
                
                await history_manager.add_message(user_id, "user", user_input_for_selina)
                await process_text_and_reply_as_selina(event, user_id, user_input_for_selina)

                if os.path.exists(tmp_doc_file_path): os.remove(tmp_doc_file_path)
            
            # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            elif event.text and not event.text.startswith('/'): # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
                user_text = event.text.strip()
                if not user_text: return # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

                logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: '{user_text[:50]}...'")
                user_input_for_selina = user_text # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                
                await history_manager.add_message(user_id, "user", user_input_for_selina)
                await process_text_and_reply_as_selina(event, user_id, user_input_for_selina)

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ universal_message_handler –¥–ª—è user {user_id}: {str(e)}", exc_info=True)
        try:
            await event.reply("üí• –û–π, —á—Ç–æ-—Ç–æ —É –º–µ–Ω—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–µ—Ä–µ–≥—Ä–µ–ª—Å—è... –ö–∞–∂–µ—Ç—Å—è, —è —Å–ª–æ–º–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –º–æ–µ–º—É –±–∞—Ç–µ, –æ–Ω –ø–æ—á–∏–Ω–∏—Ç! üõ†Ô∏è")
        except Exception: # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–µ –º–æ–∂–µ–º
            pass


async def process_text_and_reply_as_selina(event, user_id: int, final_input_for_selina: str):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—Ü–∞ –°–µ–ª–∏–Ω—ã."""
    
    search_query_text = final_input_for_selina # –î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ –ø–æ–ª—É—á–∏–ª –±–æ—Ç
    web_search_results = ""
    if check_if_web_search_needed(search_query_text):
        logger.info(f"–ó–∞–ø—É—Å–∫–∞—é –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞, –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ—Å—è —Å: '{search_query_text[:70]}...'")
        web_search_results = await perform_web_search(search_query_text) # –ò—â–µ–º –ø–æ –≤—Å–µ–º—É —Ç–µ–∫—Å—Ç—É, —á—Ç–æ "—É—Å–ª—ã—à–∞–ª–∞" –°–µ–ª–∏–Ω–∞
        if web_search_results:
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {web_search_results[:200]}...")
        else:
            logger.info("–í–µ–±-–ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")

    current_chat_history = await history_manager.get_history(user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    messages_for_gpt = list(current_chat_history) # –ö–æ–ø–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
    if web_search_results:
        messages_for_gpt.append({
            "role": "system",
            "content": f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (–∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏, —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ):\n{web_search_results}"
        })
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —ç—Ç–æ —Ç–æ, –Ω–∞ —á—Ç–æ –°–µ–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å
    # –≠—Ç–æ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ –≤ universal_message_handler –ø—Ä–∏ –≤—ã–∑–æ–≤–µ add_message

    try:
        gpt_response = await gpt_client.chat.completions.create(
            model="gpt-4.1-mini", # –ò–ª–∏ –¥—Ä—É–≥–∞—è –ø–æ–¥—Ö–æ–¥—è—â–∞—è –º–æ–¥–µ–ª—å –∏–∑ g4f
            messages=messages_for_gpt,
            max_tokens=1000, # –õ–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –æ—Ç–≤–µ—Ç –°–µ–ª–∏–Ω—ã
            temperature=0.75, # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –±–æ–ª–µ–µ "–∂–∏–≤–æ–≥–æ" –æ—Ç–≤–µ—Ç–∞
            # stop=["\n\n\n"] # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ø-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        )

        if gpt_response.choices and gpt_response.choices[0].message.content:
            selina_answer_text = gpt_response.choices[0].message.content.strip()
            
            # –§–∞–∫—Ç-—á–µ–∫–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –°–µ–ª–∏–Ω—ã, –µ—Å–ª–∏ –±—ã–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞
            if web_search_results:
                fact_check_info = await fact_checker.check_facts(selina_answer_text, web_search_results)
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –°–µ–ª–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ fact_check_info, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è
                # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∫ —Å–ø–æ—Ä–Ω—ã–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º
                if fact_check_info and fact_check_info.get("verifiable_claims"):
                    for claim in fact_check_info["verifiable_claims"]:
                        if claim.get("status") == "contradicted" and claim.get("claim") in selina_answer_text:
                             selina_answer_text = selina_answer_text.replace(
                                 claim["claim"], 
                                 f"{claim['claim']} (‚ö†Ô∏è –ø–æ –¥–∞–Ω–Ω—ã–º –∏–∑ '{claim.get('source_snippet', '–¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤')}', —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫)"
                             )


            await history_manager.add_message(user_id, "assistant", selina_answer_text) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –°–µ–ª–∏–Ω—ã

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–∞—Å—Ç—è–º–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
            max_msg_len = 4000 # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram API –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (—Ä–µ–∞–ª—å–Ω–æ–µ 4096, –±–µ—Ä–µ–º —Å –∑–∞–ø–∞—Å–æ–º)
            for i in range(0, len(selina_answer_text), max_msg_len):
                chunk = selina_answer_text[i:i + max_msg_len]
                await event.reply(chunk)
                if len(selina_answer_text) > max_msg_len : await asyncio.sleep(0.5) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏

        else:
            logger.warning(f"GPT –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –¥–ª—è user {user_id}.")
            await event.reply("üß† –û–π, –∫–∞–∂–µ—Ç—Å—è, —è –∑–∞–¥—É–º–∞–ª–∞—Å—å –∏ –ø–æ—Ç–µ—Ä—è–ª–∞ –º—ã—Å–ª—å... –ü–æ–ø—Ä–æ–±—É–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –µ—â–µ —Ä–∞–∑? –ú–æ–∂–µ—Ç, –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏?")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ GPT –¥–ª—è user {user_id}: {str(e)}", exc_info=True)
        await event.reply("üòµ‚Äçüí´ –£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –º–æ–∏–º–∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏... –î–∞–π –º–Ω–µ –º–∏–Ω—É—Ç–∫—É –ø—Ä–∏–π—Ç–∏ –≤ —Å–µ–±—è –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞. –ï—Å–ª–∏ –Ω–µ –ø–æ–º–æ–∂–µ—Ç ‚Äì –∑–æ–≤–∏ –º–æ–µ–≥–æ –±–∞—Ç—é-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞! üÜò")


async def main_bot_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫–∞ –∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    await history_manager.init_db()
    
    # –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telegram
    # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞: await client.start()
    # –î–ª—è –±–æ—Ç–∞:
    await client.start(bot_token=BOT_TOKEN) 
    
    logger.info("üü£ –ß–µ–ª–æ–≤–µ–∫–æ–±–æ—Ç –°–µ–ª–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é!")
    await client.run_until_disconnected()

if __name__ == "__main__":
    try:
        asyncio.run(main_bot_loop())
    except KeyboardInterrupt:
        logger.info("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ: {e}", exc_info=True)
    finally:
        logger.info("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        if client.is_connected():
            asyncio.run(client.disconnect())
        asyncio.run(history_manager.close())
        logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

