from telethon import TelegramClient, events
from dotenv import load_dotenv
from os import getenv
import logging
import asyncio
import os
from uuid import uuid4
from pydub import AudioSegment
import speech_recognition as sr
from g4f import AsyncClient
from g4f.Provider import RetryProvider, ChatGptEs, DDG, Jmuz, Liaobots, OIVSCode, Pizzagpt, PollinationsAI

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
API_ID = getenv('API_ID')
API_HASH = getenv('API_HASH')
BOT_TOKEN = getenv('BOT_TOKEN')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not all([API_ID, API_HASH, BOT_TOKEN]):
    raise EnvironmentError("–ù–µ –∑–∞–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger('MilitaryAI')
logging.getLogger('g4f').setLevel(logging.WARNING)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
PROVIDERS = [
    RetryProvider,
    ChatGptEs,
    DDG,
    Jmuz,
    Liaobots,
    OIVSCode,
    Pizzagpt,
    PollinationsAI
]

client = TelegramClient('mil_bot', int(API_ID), API_HASH)
gpt_client = AsyncClient(provider=RetryProvider(PROVIDERS, shuffle=True))

SYSTEM_PROMPT = """–¢—ã "–í–æ–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫" —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤:
- –¢–∞–∫—Ç–∏–∫–µ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
- –í–æ–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–µ
- –ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: [–§–∞–∫—Ç] ‚Üí [–î–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ/–†–∞—Å—á–µ—Ç]
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."""

async def convert_audio(input_path: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∞—É–¥–∏–æ –≤ —Ç–µ–∫—Å—Ç —Å –æ—á–∏—Å—Ç–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤"""
    wav_path = f"{uuid4()}.wav"
    try:
        audio = AudioSegment.from_file(input_path)
        audio.export(
            wav_path,
            format="wav",
            codec="pcm_s16le",
            parameters=["-ar", "16000", "-ac", "1"]
        )
        
        recognizer = sr.Recognizer()
        with sr.AudioFile(wav_path) as source:
            audio_data = recognizer.record(source)
            return recognizer.recognize_google(audio_data, language="ru-RU")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {str(e)}")
        raise
    finally:
        for path in [input_path, wav_path]:
            if os.path.exists(path):
                try: os.remove(path)
                except: pass

@client.on(events.NewMessage(func=lambda e: e.voice))
async def voice_handler(event):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        async with client.action(event.chat_id, 'typing'):
            if event.message.media.document.size > 3 * 1024 * 1024:
                return
                
            tmp_file = f"voice_{uuid4()}.oga"
            await event.download_media(tmp_file)
            
            try:
                text = await convert_audio(tmp_file)
                if not text.strip():
                    return
                    
                response = await gpt_client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "system", "content": SYSTEM_PROMPT},
                        {"role": "user", "content": text}
                    ],
                    max_tokens=300,
                    timeout=25
                )
                
                if response.choices:
                    await event.reply(response.choices[0].message.content[:4000])

            except Exception:
                logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", exc_info=True)

    except Exception:
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", exc_info=True)

@client.on(events.NewMessage(pattern='/start'))
async def start_handler(event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    await event.respond(
        "üî≠ –í–æ–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –ò–ò –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è:\n"
        "- –¢–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n"
        "- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞—Å—á–µ—Ç–æ–≤\n"
        "- –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
    )

@client.on(events.NewMessage())
async def text_handler(event):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if event.text.startswith('/') or not event.text.strip():
        return
    
    try:
        async with client.action(event.chat_id, 'typing'):
            response = await gpt_client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": SYSTEM_PROMPT},
                    {"role": "user", "content": event.text}
                ],
                max_tokens=300,
                timeout=20
            )
            
            if response.choices:
                await event.reply(response.choices[0].message.content[:4000])
                
    except Exception:
        logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞", exc_info=True)

async def graceful_shutdown():
    """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    await client.disconnect()
    logger.info("–ë–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")

if __name__ == "__main__":
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        client.start(bot_token=BOT_TOKEN)
        client.run_until_disconnected()
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        client.loop.run_until_complete(graceful_shutdown())
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        if client.loop.is_running():
            client.loop.close()